import React from 'react'
import Head from 'next/head'
import { useRouter } from 'next/router'
import qs from 'qs'

import { AppState } from '../redux/store'

import { Grid, Typography } from '@mui/material'
import { useGetPizzasQuery } from '../api/pizzas.api'
import { Filter, MainCard, Sceleton, Sort } from '../components'

import { useDispatch, useSelector } from 'react-redux'
import Pagi from '../components/Pagination'
import { addPizzas } from '../redux/slices/selectedPizzas'

import { CardDataType } from '../types/types'
import { setFilterByUrl } from '../redux/slices/filter'

// import simpleTheme from './../theme/theme'

// const Root = styled('div')(({ simpleTheme }) => ({
//   padding: simpleTheme.spacing(1),
//   [theme.breakpoints.down('md')]: {
//     backgroundColor: red[500]
//   },
//   [theme.breakpoints.up('md')]: {
//     backgroundColor: blue[500]
//   },
//   [theme.breakpoints.up('lg')]: {
//     backgroundColor: green[500]
//   }
// }))

export const allSets = ['тонкое', 'традиционное']
export const allSizes = [26, 30, 40]

const Home = () => {
  const { categoryId, sort } = useSelector((state: AppState) => state.filter)
  const searchValue = useSelector((state: AppState) => state.search.searchValue)
  const pageNumber = useSelector(
    (state: AppState) => state.pagination.pageNumber
  )
  const router = useRouter()
  const dispatch = useDispatch()

  const { data, isFetching } = useGetPizzasQuery('')
  console.log(data)

  // const { data, isFetching } = useGetPizzasQuery(
  //   {
  //     categoryId,
  //     sort,
  //     searchValue,
  //     pageNumber
  //   },
  //   {
  //     refetchOnFocus: true
  //   }
  // )

  // //parse url params from url
  // React.useEffect(() => {
  //   const urlObj = qs.parse(router.asPath.split('?')[1])
  //   dispatch(setFilterByUrl(urlObj))
  // }, [])

  //put params into url
  React.useEffect(() => {
    window.scrollTo(0, 0)
    router.push({
      query: {
        category: categoryId,
        sort,
        p: pageNumber,
        search: searchValue ? searchValue : null //TODO: как сделать если не надо дефолт в урл?
      }
    })

    //TODO: fix eslint
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [categoryId, sort, searchValue, pageNumber])

  return (
    <>
      <Head>
        <title>NextBoots</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <Grid container sx={{ justifyContent: 'space-between' }} gap={'10px'}>
        <Filter />
        <Sort />
      </Grid>

      <Typography variant='h2' component='div' mb='35px'>
        Все пиццы
      </Typography>
      <Grid
        container
        gap='10px'
        sx={{ justifyContent: 'space-between', marginBottom: '25px' }}>
        {isFetching
          ? [...Array(4)].map((_, index: number) => (
              <Grid
                item
                key={index}
                sx={{ display: 'flex', justifyContent: 'center' }}>
                <Sceleton key={index} />
              </Grid>
            ))
          : data?.map((card: CardDataType) => {
              return (
                <Grid
                  item
                  key={card.id}
                  sx={{ display: 'flex', justifyContent: 'center' }}>
                  <MainCard
                    card={card}
                    allSets={allSets}
                    allSizes={allSizes}
                    selectedPizzas={addPizzas}
                    dispatch={dispatch}
                  />
                </Grid>
              )
            })}
      </Grid>
      <Pagi />
    </>
  )
}

export default Home

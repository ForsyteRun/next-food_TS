import React from "react";
import { GetServerSideProps } from "next";
import Head from "next/head";
import { dehydrate, QueryClient, useQuery } from '@tanstack/react-query';
import { Stack, Typography } from "@mui/material";
import { getPizzas } from "../api/getPizzas";
import { MainCard, Sceleton, SortCard, TabMain, SortBy } from "../components";
import { useActions } from "../hooks/useActions";
import { AppStore, wrapper } from "../store";
import { useAppDispatch, useAppSelector } from "../store/hooks";
import { tab } from "../store/redusers/tab";
import { CardDataType } from "../types/types";
import { items } from "../store/redusers/pizzas";

const tabMenuItems = ['Мясные', 'Вегетарианские', 'Открытые', 'Закрытые']

const Home = () => {
  const dispatch = useAppDispatch()
  const {isLoading, pizzas} = useAppSelector(state => state.pizzas)
  const {sortBy} = useAppSelector(state => state.filters)
  const {items} = useActions()

  const { data } = useQuery({ queryKey: ['pizzasInit', {sortByItem: sortBy}], queryFn: getPizzas })
  // useQuery(['pizzasInit'], getPizzas)

  React.useEffect(() => {
    dispatch(items(data))
  }, [data])

  const onSelectTab =React.useCallback((index: number | null) => {
    // dispatch(tab(index))
  }, [])

  return (
    <>
      <Head>
        <title>NextBoots</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Stack direction='row' justifyContent='space-between' mb='32px'>
        <TabMain 
          onClick={onSelectTab}
          items={tabMenuItems} 
          />
        <SortBy itemsSort={[
          {value: 'popular', label: 'популярности', id: 0},
          {value: 'price', label: 'цене', id: 1},
          {value: 'alphabet', label: 'алфавиту', id: 2},
        ]} isLoading={isLoading}/>
      </Stack>
      <Typography variant="h2" component="div" mb='35px'>Все пиццы</Typography> 
      <Stack direction='row' flexWrap='wrap' justifyContent='space-between' rowGap={8.125}>
        {
          pizzas && 
            pizzas.map((card: CardDataType) => {
            return <MainCard card={card} key={card.id} />;
          })
        }
      </Stack>
    </>
  );
};

export default Home;

export const getServerSideProps: GetServerSideProps = wrapper.getServerSideProps((store: AppStore) => async ( ) => {

  const queryClient = new QueryClient()
  // prefetch data on the server & dispatch in redux
  store.dispatch(items(await queryClient.fetchQuery(['pizzasInit'], getPizzas)))
  
  return {
    props: {
        // dehydrate query cache
        dehydratedState: dehydrate(queryClient),
    }}
})



